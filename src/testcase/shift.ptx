.version 6.5
.target sm_30
.address_size 64

.entry run(
    .param .u64 input,
    .param .u64 shift,
    .param .u64 output
)
{
	.reg .u64 	    input_addr;
	.reg .u64 	    shift_addr;
    .reg .u64 	    output_addr;
	ld.param.u64 	input_addr, [input];
	ld.param.u64 	shift_addr, [shift];
    ld.param.u64 	output_addr, [output];

    .reg .u32       tid_x;
    .reg .u64       tid_x_64;
    .reg .u32       ntid_x;
    .reg .u32       ctaid_x;
    .reg .u64       global_id_64;
    mov.u32         tid_x, %tid.x;
    cvt.u64.u32     tid_x_64, tid_x;
    mov.u32         ctaid_x, %ctaid.x;
    mov.u32         ntid_x, %ntid.x;
    mad.wide.u32    global_id_64, ntid_x, ctaid_x, tid_x_64;

    mad.lo.u64      input_addr, global_id_64, 2, input_addr;
    mad.lo.u64      shift_addr, global_id_64, 2, shift_addr;
    mad.lo.u64      output_addr, global_id_64, 2, output_addr;

    .reg .b16    value;
    .reg .b32    shift_value;

    ld.b16       value, [input_addr];
    ld.b16       shift_value, [shift_addr];
    <OP>     value, value, shift_value;
    st.b16       [output_addr], value;

	ret;
}
