.version 7.0
.target sm_80
.address_size 64

.entry run(
    .param .u64 input1,
    .param .u64 input2,
    .param .u64 output
)
{
	.reg .u64 	    input1_addr;
	.reg .u64 	    input2_addr;
    .reg .u64 	    output_addr;
	ld.param.u64 	input1_addr, [input1];
	ld.param.u64 	input2_addr, [input2];
    ld.param.u64 	output_addr, [output];

    .reg .u32       tid_x;
    .reg .u64       tid_x_64;
    .reg .u32       ntid_x;
    .reg .u32       ctaid_x;
    .reg .u64       global_id_64;
    mov.u32         tid_x, %tid.x;
    cvt.u64.u32     tid_x_64, tid_x;
    mov.u32         ctaid_x, %ctaid.x;
    mov.u32         ntid_x, %ntid.x;
    mad.wide.u32    global_id_64, ntid_x, ctaid_x, tid_x_64;

    mad.lo.u64      input1_addr, global_id_64, <TYPE_SIZE>, input1_addr;
    mad.lo.u64      input2_addr, global_id_64, <TYPE_SIZE>, input2_addr;
    mad.lo.u64      output_addr, global_id_64, <TYPE_SIZE>, output_addr;

    .reg .<TYPE>    value1;
    .reg .<TYPE>    value2;

    ld.<BTYPE>       value1, [input1_addr];
    ld.<BTYPE>       value2, [input2_addr];
    <OP>             value1, value1, value2;
    st.<BTYPE>       [output_addr], value1;

	ret;
}
